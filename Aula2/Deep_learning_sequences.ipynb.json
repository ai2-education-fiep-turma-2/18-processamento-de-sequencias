{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from tensorflow.keras.models import Sequential \n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras.optimizers import RMSprop\n",
    "\n",
    "\n",
    "from tensorflow.keras.datasets import imdb\n",
    "from tensorflow.keras.preprocessing import sequence\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras.models import Sequential\n",
    "import tensorflow as tf\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "#import seaborn as sns\n",
    "\n",
    "from pandas.tseries.holiday import USFederalHolidayCalendar\n",
    "\n",
    "data_dir = '/home/silvio/dataset/jena/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['\"Date Time\"', '\"p (mbar)\"', '\"T (degC)\"', '\"Tpot (K)\"', '\"Tdew (degC)\"', '\"rh (%)\"', '\"VPmax (mbar)\"', '\"VPact (mbar)\"', '\"VPdef (mbar)\"', '\"sh (g/kg)\"', '\"H2OC (mmol/mol)\"', '\"rho (g/m**3)\"', '\"wv (m/s)\"', '\"max. wv (m/s)\"', '\"wd (deg)\"']\n",
      "420451\n"
     ]
    }
   ],
   "source": [
    "fname = os.path.join(data_dir, 'jena_climate_2009_2016.csv')\n",
    "f = open(fname)\n",
    "data = f.read()\n",
    "f.close()\n",
    "lines = data.split('\\n')\n",
    "header = lines[0].split(',')\n",
    "lines = lines[1:]\n",
    "print(header)\n",
    "print(len(lines))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "float_data = np.zeros((len(lines), len(header) - 1))\n",
    "for i, line in enumerate(lines):\n",
    "    values = [float(x) for x in line.split(',')[1:]]\n",
    "    float_data[i, :] = values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(420451, 14)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "float_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "float_data=float_data[0:400,]\n",
    "float_data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Coluna Temperatura"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f6d9ac58790>]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "temp = float_data[:, 1] \n",
    "plt.plot(range(len(temp)), temp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# amostra de intervalo de datas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f6e0c1c2070>]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(400), temp[:400])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# normalização"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean = float_data[:200000].mean(axis=0)\n",
    "float_data -= mean\n",
    "std = float_data[:200000].std(axis=0)\n",
    "float_data /= std"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# dataset de dados climáticos\n",
    "## Colunas\n",
    "* Date Time \n",
    "* p (mbar)\n",
    "* T (degC)\n",
    "* Tpot (K)\n",
    "* Tdew (degC)\n",
    "* rh (%)\n",
    "* VPmax (mbar)\n",
    "* VPact (mbar)\n",
    "* VPdef (mbar)\n",
    "* sh (g/kg)\n",
    "* H2OC (mmol/mol)\n",
    "* rho (g/m**3)\n",
    "* wv (m/s)\n",
    "* max. wv (m/s)\n",
    "* wd (deg)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Função para auxiliar na criação de dados de treino, teste e validação\n",
    "* palavra reservad yield : suporte para criação de objetos do tipo generator\n",
    "* Modelo mais eficiente de leitura de dados sem comprometer a memória"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generator(data, lookback, delay, min_index, max_index,\n",
    "              shuffle=False, batch_size=128, step=6):\n",
    "    if max_index is None:\n",
    "        max_index = len(data) - delay - 1\n",
    "    i = min_index + lookback\n",
    "    \n",
    "    while 1:\n",
    "        if shuffle:\n",
    "            rows = np.random.randint(\n",
    "                min_index + lookback, max_index, size=batch_size)\n",
    "        else:\n",
    "            if i + batch_size >= max_index:\n",
    "                i = min_index + lookback\n",
    "            \n",
    "            rows = np.arange(i, min(i + batch_size, max_index))\n",
    "            i += len(rows)\n",
    "        # cria samples\n",
    "        samples = np.zeros((len(rows),\n",
    "                           lookback // step,\n",
    "                           data.shape[-1]))\n",
    "        \n",
    "        #cria targets - mesmo quantidade de linhas de rows (depende do batch size)\n",
    "        targets = np.zeros((len(rows),))\n",
    "        #loop pela quantidade de linhas do batch\n",
    "        \n",
    "        for j, row in enumerate(rows):\n",
    "            indices = range(rows[j] - lookback, rows[j], step)\n",
    "            \n",
    "            samples[j] = data[indices]\n",
    "            # target é sempre a posição 1\n",
    "            targets[j] = data[rows[j] + delay][1]\n",
    "        yield samples, targets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "#lookback = 1440\n",
    "lookback = 30 # timesteps no passado\n",
    "step = 5      # sample de dados\n",
    "#delay = 144\n",
    "delay = 10    # time steps no futuro\n",
    "#batch_size = 128\n",
    "batch_size = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_gen = generator(float_data, # dados de entrada\n",
    "                      lookback=lookback,\n",
    "                      delay=delay,\n",
    "                      min_index=0,\n",
    "                      max_index=3000,#200000,\n",
    "                      shuffle=True,\n",
    "                      step=step,\n",
    "                      batch_size=batch_size)\n",
    "val_gen = generator(float_data,\n",
    "                    lookback=lookback,\n",
    "                    delay=delay,\n",
    "                    min_index=3000,#200001,\n",
    "                    max_index=3500,#300000,\n",
    "                    step=step,\n",
    "                    batch_size=batch_size)\n",
    "test_gen = generator(float_data,\n",
    "                     lookback=lookback,\n",
    "                     delay=delay,\n",
    "                     min_index=3500,#300001,\n",
    "                     max_index=3999,#None,\n",
    "                     step=step,\n",
    "                     batch_size=batch_size)\n",
    "\n",
    "val_steps = (3500 - 3000 - lookback)\n",
    "\n",
    "test_steps = (len(float_data) - 3500 - lookback)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'generator'>\n"
     ]
    }
   ],
   "source": [
    "print(type(val_gen))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 6, 14)\n",
      "(2,)\n",
      "[[[ 1.05226233 -2.1087095  -2.16751806 -2.08189502  1.06687412\n",
      "   -1.35684195 -1.56189323 -0.80281834 -1.56255032 -1.56517179\n",
      "    2.35181043 -1.24360504 -1.20974035 -0.16876213]\n",
      "  [ 1.11357995 -2.06126527 -2.12507534 -2.03026123  1.04893938\n",
      "   -1.34513714 -1.54045486 -0.79868641 -1.54379316 -1.54635739\n",
      "    2.31744846 -0.04620638 -0.29584123  1.99257049]\n",
      "  [ 1.19730208 -1.94378432 -2.01561778 -1.88094189  1.06687412\n",
      "   -1.31132324 -1.48090386 -0.79868641 -1.48377026 -1.48756241\n",
      "    2.21506865 -1.00282378 -1.04669731  0.9003586 ]\n",
      "  [ 1.24682785 -1.89972897 -1.97540888 -1.8307036   1.05491763\n",
      "   -1.29701736 -1.45946549 -0.79455447 -1.4650131  -1.46639622\n",
      "    2.18164811 -1.15249862 -1.20974035 -0.87766076]\n",
      "  [ 1.29045769 -1.84889587 -1.9284985  -1.78325634  1.00709167\n",
      "   -1.28141094 -1.44040917 -0.7862906  -1.44250452 -1.44758183\n",
      "    2.13975476 -0.91171736 -0.45888426 -1.83478937]\n",
      "  [ 1.37417982 -1.83308112 -1.91844627 -1.78465184  0.94133097\n",
      "   -1.2762088  -1.44040917 -0.77802672 -1.44625595 -1.44758183\n",
      "    2.1454033  -0.02017597 -0.13708879  1.05045114]]\n",
      "\n",
      " [[-2.7058001  -0.30921765 -0.09675975 -0.30960002 -0.02714476\n",
      "   -0.4945875  -0.50664935 -0.34830523 -0.46713239 -0.46452975\n",
      "   -0.39926473  2.06225648  2.17125735  0.42006246]\n",
      "  [-2.62089878 -0.34084714 -0.13473482 -0.34448771 -0.02116651\n",
      "   -0.51799712 -0.53523383 -0.35863507 -0.49714384 -0.49745494\n",
      "   -0.34889857  2.91475226  2.17125735  0.42237158]\n",
      "  [-2.50533866 -0.36569887 -0.16824224 -0.4477553  -0.18855738\n",
      "   -0.53750514 -0.62336933 -0.31318376 -0.58717819 -0.58917511\n",
      "   -0.29335458  1.96464245  2.11547947  0.41313511]\n",
      "  [-2.44873778 -0.4312171  -0.23860781 -0.48962053 -0.10486195\n",
      "   -0.58432439 -0.65671789 -0.35863507 -0.6246925  -0.6221003\n",
      "   -0.21804069  1.02104025  0.77681033  0.65328318]\n",
      "  [-2.42515408 -0.48995757 -0.29892116 -0.52590374 -0.02714476\n",
      "   -0.6259415  -0.68530238 -0.39995445 -0.65470395 -0.65267369\n",
      "   -0.15755422 -0.18937361 -0.40310638  0.34270707]\n",
      "  [-2.32256499 -0.50012419 -0.31679178 -0.53288128 -0.01518827\n",
      "   -0.63244417 -0.69006646 -0.40615235 -0.65845538 -0.65972908\n",
      "   -0.1229569  -0.48221567 -0.67341457  0.42006246]]]\n",
      "[-1.72689642 -0.59953115]\n"
     ]
    }
   ],
   "source": [
    "samples, targets = next(train_gen)\n",
    "print(samples.shape)\n",
    "print(targets.shape)\n",
    "print(samples)\n",
    "print(targets)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Percorrendo um objeto generator\n",
    "* "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    " def evaluate_naive_method():\n",
    "            batch_maes = []\n",
    "            for step in range(val_steps):\n",
    "                samples, targets = next(val_gen)\n",
    "                preds = samples[:, -1, 1]\n",
    "                mae = np.mean(np.abs(preds - targets))\n",
    "                batch_maes.append(mae)\n",
    "            print(np.mean(batch_maes))\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.12608171856419761\n"
     ]
    }
   ],
   "source": [
    "evaluate_naive_method()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.5672247338393395"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "celsius_mae = 0.29 * std[1]\n",
    "celsius_mae"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#np.mean(np.abs(preds - targets))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# função para plotar loss de treino e teste"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_loss(history):\n",
    "    loss = history.history['loss']\n",
    "    val_loss = history.history['val_loss']\n",
    "    epochs = range(1, len(loss) + 1)\n",
    "    plt.figure()\n",
    "    plt.plot(epochs, loss, 'bo', label='Training loss')\n",
    "    plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
    "    plt.title('Training and validation loss')\n",
    "    plt.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exemplos de Redes neurais para atacar o problema de série temporal\n",
    "* MLP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "14\n",
      "(420451, 14)\n"
     ]
    }
   ],
   "source": [
    "print(lookback // step)\n",
    "print(float_data.shape[-1])\n",
    "print(float_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "model.add(layers.Flatten(input_shape=(lookback // step, float_data.shape[-1]))) \n",
    "model.add(layers.Dense(32, activation='relu'))\n",
    "model.add(layers.Dense(1))\n",
    "model.compile(optimizer=RMSprop(), loss='mae') \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* fit generator : função que recebe como entrada um gerador\n",
    "* gera dinamicamente os dados para processamento das sequências"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "200/200 [==============================] - 2s 9ms/step - loss: 0.4946 - val_loss: 0.3297\n",
      "Epoch 2/20\n",
      "200/200 [==============================] - 2s 8ms/step - loss: 0.2590 - val_loss: 0.3304\n",
      "Epoch 3/20\n",
      "200/200 [==============================] - 2s 8ms/step - loss: 0.2264 - val_loss: 0.2844\n",
      "Epoch 4/20\n",
      "200/200 [==============================] - 2s 8ms/step - loss: 0.2366 - val_loss: 0.2826\n",
      "Epoch 5/20\n",
      "200/200 [==============================] - 2s 8ms/step - loss: 0.2229 - val_loss: 0.2407\n",
      "Epoch 6/20\n",
      "200/200 [==============================] - 2s 8ms/step - loss: 0.1927 - val_loss: 0.2618\n",
      "Epoch 7/20\n",
      "200/200 [==============================] - 2s 8ms/step - loss: 0.2326 - val_loss: 0.2069\n",
      "Epoch 8/20\n",
      "200/200 [==============================] - 2s 8ms/step - loss: 0.2028 - val_loss: 0.2662\n",
      "Epoch 9/20\n",
      "200/200 [==============================] - 2s 8ms/step - loss: 0.1885 - val_loss: 0.2050\n",
      "Epoch 10/20\n",
      "200/200 [==============================] - 2s 8ms/step - loss: 0.1896 - val_loss: 0.2566\n",
      "Epoch 11/20\n",
      "200/200 [==============================] - 1s 7ms/step - loss: 0.1890 - val_loss: 0.1798\n",
      "Epoch 12/20\n",
      "200/200 [==============================] - 1s 6ms/step - loss: 0.2355 - val_loss: 0.1740\n",
      "Epoch 13/20\n",
      "200/200 [==============================] - 1s 7ms/step - loss: 0.1844 - val_loss: 0.2044\n",
      "Epoch 14/20\n",
      "200/200 [==============================] - 1s 7ms/step - loss: 0.1826 - val_loss: 0.1809\n",
      "Epoch 15/20\n",
      "200/200 [==============================] - 1s 7ms/step - loss: 0.1850 - val_loss: 0.2012\n",
      "Epoch 16/20\n",
      "200/200 [==============================] - 2s 8ms/step - loss: 0.1713 - val_loss: 0.1719\n",
      "Epoch 17/20\n",
      "200/200 [==============================] - 2s 8ms/step - loss: 0.1807 - val_loss: 0.1685\n",
      "Epoch 18/20\n",
      "200/200 [==============================] - 2s 8ms/step - loss: 0.1614 - val_loss: 0.2572\n",
      "Epoch 19/20\n",
      "200/200 [==============================] - 2s 9ms/step - loss: 0.1785 - val_loss: 0.2239\n",
      "Epoch 20/20\n",
      "200/200 [==============================] - 2s 8ms/step - loss: 0.1748 - val_loss: 0.1800\n"
     ]
    }
   ],
   "source": [
    "epochs=20\n",
    "steps_p_epochs=200\n",
    "\n",
    "#steps_p_epochs=500\n",
    "#epochs=20\n",
    "\n",
    "history = model.fit_generator(train_gen,\n",
    "steps_per_epoch=steps_p_epochs, epochs=epochs, validation_data=val_gen, validation_steps=val_steps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_loss(history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/40\n",
      "500/500 [==============================] - 7s 13ms/step - loss: 0.3504 - val_loss: 0.2156\n",
      "Epoch 2/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1892 - val_loss: 0.2288\n",
      "Epoch 3/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1777 - val_loss: 0.1499\n",
      "Epoch 4/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1670 - val_loss: 0.2381\n",
      "Epoch 5/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1494 - val_loss: 0.1467\n",
      "Epoch 6/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1424 - val_loss: 0.2049\n",
      "Epoch 7/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1467 - val_loss: 0.1698\n",
      "Epoch 8/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1439 - val_loss: 0.2015\n",
      "Epoch 9/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1602 - val_loss: 0.1661\n",
      "Epoch 10/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1331 - val_loss: 0.1403\n",
      "Epoch 11/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1396 - val_loss: 0.1169\n",
      "Epoch 12/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1352 - val_loss: 0.1116\n",
      "Epoch 13/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1317 - val_loss: 0.1133\n",
      "Epoch 14/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1337 - val_loss: 0.1291\n",
      "Epoch 15/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1306 - val_loss: 0.1405\n",
      "Epoch 16/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1332 - val_loss: 0.1545\n",
      "Epoch 17/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1261 - val_loss: 0.1455\n",
      "Epoch 18/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1200 - val_loss: 0.1623\n",
      "Epoch 19/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1148 - val_loss: 0.1907\n",
      "Epoch 20/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1133 - val_loss: 0.1337\n",
      "Epoch 21/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1185 - val_loss: 0.2203\n",
      "Epoch 22/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1229 - val_loss: 0.1654\n",
      "Epoch 23/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1156 - val_loss: 0.1833\n",
      "Epoch 24/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1214 - val_loss: 0.1630\n",
      "Epoch 25/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1090 - val_loss: 0.1750\n",
      "Epoch 26/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1146 - val_loss: 0.1422\n",
      "Epoch 27/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1201 - val_loss: 0.1305\n",
      "Epoch 28/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1144 - val_loss: 0.1724\n",
      "Epoch 29/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1073 - val_loss: 0.1208\n",
      "Epoch 30/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1071 - val_loss: 0.1271\n",
      "Epoch 31/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1087 - val_loss: 0.1646\n",
      "Epoch 32/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1087 - val_loss: 0.1345\n",
      "Epoch 33/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1082 - val_loss: 0.1939\n",
      "Epoch 34/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1050 - val_loss: 0.1894\n",
      "Epoch 35/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1197 - val_loss: 0.1267\n",
      "Epoch 36/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1084 - val_loss: 0.1421\n",
      "Epoch 37/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1086 - val_loss: 0.1411\n",
      "Epoch 38/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1045 - val_loss: 0.2196\n",
      "Epoch 39/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1002 - val_loss: 0.1342\n",
      "Epoch 40/40\n",
      "500/500 [==============================] - 6s 12ms/step - loss: 0.1047 - val_loss: 0.1821\n"
     ]
    }
   ],
   "source": [
    "\n",
    "model = Sequential()\n",
    "model.add(layers.SimpleRNN(32, input_shape=(None, float_data.shape[-1])))\n",
    "model.add(layers.Dense(1))\n",
    "model.compile(optimizer=RMSprop(), loss='mae')\n",
    "history = model.fit_generator(train_gen,\n",
    "                              steps_per_epoch=500,\n",
    "                              epochs=40,\n",
    "                              validation_data=val_gen,\n",
    "                              validation_steps=val_steps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_loss(history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Usando camada GRU"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "model = Sequential()\n",
    "model.add(layers.GRU(32, input_shape=(None, float_data.shape[-1])))\n",
    "model.add(layers.Dense(1))\n",
    "model.compile(optimizer=RMSprop(), loss='mae')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "500/500 [==============================] - 7s 9ms/step - loss: 0.2830 - val_loss: 0.2048\n",
      "Epoch 2/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1721 - val_loss: 0.1100\n",
      "Epoch 3/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1573 - val_loss: 0.1206\n",
      "Epoch 4/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1553 - val_loss: 0.1197\n",
      "Epoch 5/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1443 - val_loss: 0.1167\n",
      "Epoch 6/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1443 - val_loss: 0.1421\n",
      "Epoch 7/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1303 - val_loss: 0.1213\n",
      "Epoch 8/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1407 - val_loss: 0.1150\n",
      "Epoch 9/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1355 - val_loss: 0.1592\n",
      "Epoch 10/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1319 - val_loss: 0.1107\n",
      "Epoch 11/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1214 - val_loss: 0.1176\n",
      "Epoch 12/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1282 - val_loss: 0.1225\n",
      "Epoch 13/20\n",
      "500/500 [==============================] - 4s 9ms/step - loss: 0.1257 - val_loss: 0.1303\n",
      "Epoch 14/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1191 - val_loss: 0.1590\n",
      "Epoch 15/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1319 - val_loss: 0.1368\n",
      "Epoch 16/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1304 - val_loss: 0.1099\n",
      "Epoch 17/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1240 - val_loss: 0.1015\n",
      "Epoch 18/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1169 - val_loss: 0.1359\n",
      "Epoch 19/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1095 - val_loss: 0.1249\n",
      "Epoch 20/20\n",
      "500/500 [==============================] - 4s 8ms/step - loss: 0.1165 - val_loss: 0.1557\n"
     ]
    }
   ],
   "source": [
    "history = model.fit_generator(train_gen,\n",
    "                            steps_per_epoch=500, epochs=20, validation_data=val_gen, validation_steps=val_steps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_loss(history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GRU \n",
    "* dropout\n",
    "* recurrent_dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:Layer gru_3 will not use cuDNN kernel since it doesn't meet the cuDNN kernel criteria. It will use generic GPU kernel as fallback when running on GPU\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(layers.GRU(32,\n",
    "                    dropout=0.2,\n",
    "                    recurrent_dropout=0.2,\n",
    "                    input_shape=(None, float_data.shape[-1])))\n",
    "model.add(layers.Dense(1))\n",
    "model.compile(optimizer=RMSprop(), loss='mae')        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/40\n",
      "500/500 [==============================] - 19s 35ms/step - loss: 0.3906 - val_loss: 0.1577\n",
      "Epoch 2/40\n",
      "500/500 [==============================] - 17s 35ms/step - loss: 0.2723 - val_loss: 0.1726\n",
      "Epoch 3/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2624 - val_loss: 0.1313\n",
      "Epoch 4/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2429 - val_loss: 0.1269\n",
      "Epoch 5/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2380 - val_loss: 0.1098\n",
      "Epoch 6/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2447 - val_loss: 0.1281\n",
      "Epoch 7/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2305 - val_loss: 0.1215\n",
      "Epoch 8/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2350 - val_loss: 0.1353\n",
      "Epoch 9/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2090 - val_loss: 0.2717\n",
      "Epoch 10/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2189 - val_loss: 0.2345\n",
      "Epoch 11/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2295 - val_loss: 0.1561\n",
      "Epoch 12/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2226 - val_loss: 0.1421\n",
      "Epoch 13/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2132 - val_loss: 0.1435\n",
      "Epoch 14/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2014 - val_loss: 0.1575\n",
      "Epoch 15/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2159 - val_loss: 0.1724\n",
      "Epoch 16/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2113 - val_loss: 0.1262\n",
      "Epoch 17/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1968 - val_loss: 0.1505\n",
      "Epoch 18/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2105 - val_loss: 0.1653\n",
      "Epoch 19/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2012 - val_loss: 0.2280\n",
      "Epoch 20/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2028 - val_loss: 0.1333\n",
      "Epoch 21/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1917 - val_loss: 0.1847\n",
      "Epoch 22/40\n",
      "500/500 [==============================] - 17s 35ms/step - loss: 0.2038 - val_loss: 0.1549\n",
      "Epoch 23/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1918 - val_loss: 0.2143\n",
      "Epoch 24/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2020 - val_loss: 0.1727\n",
      "Epoch 25/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2089 - val_loss: 0.1690\n",
      "Epoch 26/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1808 - val_loss: 0.1462\n",
      "Epoch 27/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1954 - val_loss: 0.2214\n",
      "Epoch 28/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2002 - val_loss: 0.1742\n",
      "Epoch 29/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1910 - val_loss: 0.1510\n",
      "Epoch 30/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1829 - val_loss: 0.1486\n",
      "Epoch 31/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1879 - val_loss: 0.1941\n",
      "Epoch 32/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.2035 - val_loss: 0.1345\n",
      "Epoch 33/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1994 - val_loss: 0.1633\n",
      "Epoch 34/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1927 - val_loss: 0.1646\n",
      "Epoch 35/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1951 - val_loss: 0.1622\n",
      "Epoch 36/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1849 - val_loss: 0.1618\n",
      "Epoch 37/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1890 - val_loss: 0.1493\n",
      "Epoch 38/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1782 - val_loss: 0.1731\n",
      "Epoch 39/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1931 - val_loss: 0.1747\n",
      "Epoch 40/40\n",
      "500/500 [==============================] - 17s 34ms/step - loss: 0.1855 - val_loss: 0.1475\n"
     ]
    }
   ],
   "source": [
    "history = model.fit_generator(train_gen,\n",
    "                                      steps_per_epoch=500, epochs=40,\n",
    "                              validation_data=val_gen, validation_steps=val_steps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_loss(history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GRU \n",
    "* Duas camadas recorrentes\n",
    "* return_sequences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:Layer gru_1 will not use cuDNN kernel since it doesn't meet the cuDNN kernel criteria. It will use generic GPU kernel as fallback when running on GPU\n",
      "WARNING:tensorflow:Layer gru_2 will not use cuDNN kernel since it doesn't meet the cuDNN kernel criteria. It will use generic GPU kernel as fallback when running on GPU\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(layers.GRU(32,\n",
    "                     dropout=0.1,\n",
    "                     recurrent_dropout=0.5,\n",
    "                     return_sequences=True,\n",
    "                     input_shape=(None, float_data.shape[-1])))\n",
    "model.add(layers.GRU(64, activation='relu',\n",
    "                     dropout=0.1,\n",
    "                     recurrent_dropout=0.5))\n",
    "model.add(layers.Dense(1))\n",
    "model.compile(optimizer=RMSprop(), loss='mae')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "history = model.fit_generator(train_gen,\n",
    "                              steps_per_epoch=500,\n",
    "                              epochs=40,\n",
    "                              validation_data=val_gen,\n",
    "                              validation_steps=val_steps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_loss(history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GRU bidirecionais\n",
    "* Camada LSTM"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GRU\n",
    "* Camadas bidirecionais"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "model.add(layers.Bidirectional(\n",
    "    layers.GRU(32), input_shape=(None, float_data.shape[-1])))\n",
    "model.add(layers.Dense(1))\n",
    "model.compile(optimizer=RMSprop(), loss='mae')\n",
    "history = model.fit_generator(train_gen,\n",
    "                              steps_per_epoch=500,\n",
    "                              epochs=40,\n",
    "                              validation_data=val_gen,\n",
    "                              validation_steps=val_steps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_loss(history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LSTM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "model.add(layers.LSTM(32, input_shape=(None, float_data.shape[-1])))\n",
    "model.add(layers.Dense(1))\n",
    "model.compile(optimizer=RMSprop(), loss='mae')\n",
    "history = model.fit_generator(train_gen,\n",
    "                              steps_per_epoch=500,\n",
    "                              epochs=40,\n",
    "                              validation_data=val_gen,\n",
    "                              validation_steps=val_steps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ls ../dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "traffic_data = pd.read_csv('../dataset/Fremont_Bridge_Bicycle_Counter.csv', index_col='Date', parse_dates=True)\n",
    "weather_data = pd.read_csv('../dataset/2500571.csv', index_col='DATE', parse_dates=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "traffic_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "daily = (\n",
    "    traffic_data\n",
    "    .resample('d')\n",
    "    .sum()\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "daily = (\n",
    "    daily\n",
    "    .assign(\n",
    "        day_of_week=lambda _df: _df.index.dayofweek\n",
    "    )\n",
    "    .pipe(pd.get_dummies, columns=['day_of_week'])\n",
    "    .rename(\n",
    "        columns={\n",
    "            'day_of_week_0': 'Mon',\n",
    "            'day_of_week_1': 'Tue',\n",
    "            'day_of_week_2': 'Wed',\n",
    "            'day_of_week_3': 'Thu',\n",
    "            'day_of_week_4': 'Fri',\n",
    "            'day_of_week_5': 'Sat',\n",
    "            'day_of_week_6': 'Sun'\n",
    "        }\n",
    "    )\n",
    ")\n",
    "daily.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cal = USFederalHolidayCalendar()\n",
    "holidays = cal.holidays('2012', '2020')\n",
    "daily = daily.join(pd.Series(1, index=holidays, name='holiday'))\n",
    "daily['holiday'].fillna(0, inplace=True)\n",
    "\n",
    "(\n",
    "    daily\n",
    "    .loc[daily.holiday == 1]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dtw=weather_data['2012-10-03':'2012-10-05']\n",
    "dtw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dtt=daily['2012-10-03':'2012-10-05']\n",
    "dtt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# join datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dtt=daily['2012-10-03':'2020-04-30']\n",
    "print(dtt.shape)\n",
    "dtw=weather_data['2012-10-03':'2020-04-30']\n",
    "print(dtw.shape)\n",
    "result = pd.concat([dtw, dtt], axis=1)\n",
    "print(result.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "result.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "result.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    " dataset = result[[\n",
    " 'LATITUDE',\n",
    " 'LONGITUDE',\n",
    " 'ELEVATION',\n",
    " 'AWND',\n",
    "'PRCP',\n",
    " 'SNOW',\n",
    " 'SNWD',\n",
    "'TAVG',\n",
    "'TMAX',\n",
    " 'TMIN',\n",
    "'WDF2',\n",
    "'WDF5',\n",
    "'WSF2',\n",
    "'WSF5',\n",
    " 'Fremont Bridge Total',\n",
    "'Fremont Bridge East Sidewalk',\n",
    " 'Fremont Bridge West Sidewalk',\n",
    " 'Mon',\n",
    " 'Tue',\n",
    " 'Wed',\n",
    " 'Thu',\n",
    " 'Fri',\n",
    " 'Sat',\n",
    " 'Sun',\n",
    " 'holiday']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset2=dataset.fillna(dataset.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset2.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dttotal = tensorflow.data.Dataset.from_tensor_slices(dataset2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dttotal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "window_size = 2\n",
    "\n",
    "dataset3 = dataset2.head(6)\n",
    "dttotal = tensorflow.data.Dataset.from_tensor_slices(dataset3)\n",
    "dttotal1 = dttotal.window(window_size + 1, shift=2, drop_remainder=False)\n",
    "dttotal2 = dttotal1.flat_map(lambda window: window.batch(window_size + 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for element in dttotal2.as_numpy_iterator(): \n",
    "   print(element)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
